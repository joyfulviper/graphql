plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.netflix.dgs.codegen' version '6.2.1'
//    id 'org.graalvm.buildtools.native' version '0.10.2'
}

ext {
    netflixDgsVersion = "9.0.0"
    springShellVersion = "3.3.0"
}

group = 'com.asd'
version = '0.0.1'

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += '--enable-preview'
}

tasks.withType(Test).configureEach {
    jvmArgs += '--enable-preview'
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += '--enable-preview'
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter'
    implementation 'org.springframework.shell:spring-shell-starter'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

generateJava {
    packageName = 'com.asd.asdfasdfasdfa.generated'
    generateClientv2 = true
}

dependencyManagement {
    imports {
        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:$netflixDgsVersion"
        mavenBom "org.springframework.shell:spring-shell-dependencies:$springShellVersion"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}